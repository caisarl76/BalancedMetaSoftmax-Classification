optimizer: adam
coslr: true
criterions:
  PerformanceLoss:
    def_file: ./loss/BalancedSoftmaxLoss.py
    loss_params: {freq_path: ./cls_freq/imagenet.json}
    optim_params: null
    weight: 1.0
endlr: 0.0
last: false
memory: {centroids: false, init_centroids: false}
model_dir: ./logs/imagenet/imagenet/models/balanced_softmax_reactnet/adam/lr_0.01/
networks:
  classifier:
    def_file: ./models/DotProductClassifier.py
    optim_params: {lr: 0.5, momentum: 0.9, weight_decay: 0.0005}
    params: {dataset: imagenet, feat_dim: 1024, log_dir: ./logs/binary/imagenet/clslearn/balms_reactnet,
      num_classes: 1000, stage1_weights: false}
  feat_model:
    def_file: ./models/reactnet.py
    fix: true
    optim_params: {lr: 0.2, momentum: 0.9, weight_decay: 0.0005}
    params: {dataset: imagenet, dropout: null, log_dir: ./logs/binary/imagenet/clslearn/balms_reactnet,
      stage1_weights: false, use_fc: false, use_selfatt: false}
shuffle: false
training_opt:
  backbone: resnet10
  batch_size: 512
  dataset: ImageNet_LT
  display_step: 10
  feature_dim: 1024
  log_dir: ./logs/binary/imagenet/clslearn/balms_reactnet
  log_root: ./logs/binary/imagenet
  num_classes: 1000
  num_epochs: 20
  num_workers: 12
  open_threshold: 0.1
  sampler: {def_file: ./data/MetaSampler.py, type: MetaSampler, meta_batch_size: 1024, init_pow: 0.1, lr: 0.001}
  scheduler_params: {gamma: 0.1, step_size: 3}
  stage: balms_reactnet
  sub_dir: clslearn
